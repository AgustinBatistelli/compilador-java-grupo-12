c=d*(e-21)/4

a := 1
b := 1
c := 2

if (a > b AND c > b)
{
    write("a es mas grande que b y c es mas grande que b")
}

x =: 27 - c
x =: r + 500
x =: 34 * 3
x =: z / f


a := 99999.99
a := 99.
a := .9999

b := "@sdADaSjfla%dfg"
b := "asldk  fh sjf"

#+ Esto es un comentario +#

if (a > b)
{
    write("a es mas grande que b")
}
else
{
    write("a es mas chico o igual a b")
}

init {
    a1, b1 : Float
    variable1 : Int
    p1, p2, p3 : String
}

a := 1
b := 1
c := 2

if (NOT a > b)
{
    write("a no es mas grande que b")
}

a := 1
b := 1
c := 2

if (a > b OR c > b)
{
    write("a es mas grande que b o c es mas grande que b")
}

read(base) #+ base es una variable +#

a := 1
b := 3

while (a > b)
{
    write("a es mas grande que b")
    a := a + 1
}

write(“ewr”)  #+ “ewr” es una cte string +#
write(var1)  #+ var1 es una variable numérica definida previamente +#



#+ TEST PARA LA FUNCION REORDER *#
reorder([x+3, 1+1, 9-x], 1, 2)  #+ caso bien escrito +#
reorder([r*j-2, x+3, 1+1, 9-x], 0, 2) #+ caso bien escrito +#
reorder([r*j-2, x+3, 1+1, 9-x], 0, 3) #+ Caso donde no reordena porque no hay nada a la derecha (pero es válido sintácticamente) #+
reorder([r*j-2, x+3, 1+1, 9-x], 1, 0) #+Caso donde no reordena porque no hay nada a la izquierda (pero es válido sintácticamente) #+

#+ Test que fallan para probar borrar el caracter de comentario de apertura y de cierre del bloque +#

#+
reorder([x+3, 1+1, 9-x], 2, 2) # + Error: valor booleano no es 0 o 1 + #
reorder(x+3, 1+1, 9-x, 1, 2) # + Error: falta corchetes + #
reorder([x+3, 1+1, 9-x], 1, 2.5) # + Error: el pivote no es un entero + #
reorder([], 1, 0) # + Error: lista vacía + #
reorder([x+3, 1+1, 9-x], 1) # + Error: falta parámetro pivote + #
+#