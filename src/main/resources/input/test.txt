#+ BLOQUE DE DECLARACION DE VARIABLES +#
init {
    varFloat1, varFloat2, varFloat3, varFloat4, varFloat5 : Float
    varInt1, varInt2, varInt3, varInt4, varInt5, varInt6, varInt7, varInt8, varInt9, varInt10, varInt11, varInt12, varInt13, varInt14 : Int
    varStr1 : String
}

varInt11 := 130814

varFloat4 := 2
varInt1 := 4
varFloat3 = varFloat4 * (varInt1 - 21) / 4

varFloat1 := 1
varFloat2 := 1
varFloat3 := 2

if (varFloat1 > varFloat2 AND varFloat3 > varFloat2)
{
    write("a es más grande que b y c es más grande que b")
}

varInt6 := 10
varInt7 := 8
varInt2 := 4

varFloat5 =: 27 - varFloat3
varFloat5 =: varInt6 + 500
varFloat5 =: 34 * 3
varFloat5 =: varInt7 / varInt2

varFloat1 := 99999.99
varFloat1 := 99.
varFloat1 := .9999

varStr1 := "@sdADaSjfla%dfg"
varStr1 := "asldk  fh sjf"

#+ Esto es un comentario +#

if (varFloat1 > varFloat2)
{
    write("a es más grande que b")
}
else
{
    write("a es más chico o igual a b")
}

varFloat1 := 1
varFloat2 := 1
varFloat3 := 2

if (NOT varFloat1 > varFloat2)
{
    write("a no es más grande que b")
}

varFloat1 := 1
varFloat2 := 1
varFloat3 := 2

if (varFloat1 > varFloat2 OR varFloat3 > varFloat2)
{
    write("a es más grande que b o c es más grande que b")
}

read(varInt13) #+ base es una variable +#

varFloat1 := 1
varFloat2 := 3

while (varFloat1 > varFloat2)
{
    write("a es más grande que b")
    varFloat1 := varFloat1 + 1
}

write("ewr")  #+ “ewr” es una cte string +#
write(varInt11)  #+ var1 es una variable numérica definida previamente +#

#+ TEST PARA IF ANIDADOS +#
varFloat1 := 5
varFloat2 := 3
varFloat3 := 7

if (varFloat1 > varFloat2)
{
    if (varFloat3 > varFloat1)
    {
        write("c es mayor que a, que es mayor que b")
    }
    else
    {
        write("a es mayor que b pero c no es mayor que a")
    }
}
else
{
    write("b es mayor o igual a a")
}

if (varFloat1 == 5)
{
    if (varFloat2 == 3)
    {
        if (varFloat3 == 7)
        {
            write("todos los valores coinciden")
        }
    }
}

varFloat5 := 75
varInt5 := 8
varInt7 := 3

#+ TEST EXTRA PARA ASIGNACIONES Y OPERACIONES ARITMÉTICAS +#
varFloat1 := (4 + 5) * (7 - 2) / 3
varFloat2 := varFloat5 / (varInt5 - varInt7)
varFloat3 := (varInt9 + varInt10) * (varInt12 - varInt13) / (varInt6 + varInt14)

#+ CASOS QUE FALLAN EN ASIGNACIONES (AGRUPADOS EN COMENTARIO) (eliminar los caracteres de apertura y cierre de bloque de codigo "/*" y "*/") +#
/*
varFloat1 := (4 + ) * (7 - 2) / 3  #+ Error: operación incompleta +#
varFloat2 := varFloat5 / (varInt5 - )  #+ Error: falta operando en resta +#
varFloat3 := * (varInt9 + varInt10) (varInt12 - varInt13)  #+ Error: operador fuera de lugar +#
*/

#+ TEST EXTRA PARA CONDICIONALES +#
varFloat1 := 3
varFloat2 := 4
varFloat3 := 5

if (varFloat1 < varFloat2 AND varFloat2 < varFloat3)
{
    write("a es menor que b y b es menor que c")
}

if (NOT varFloat1 == varFloat2)
{
    write("a no es igual a b")
}

#+ CASOS QUE FALLAN EN CONDICIONALES (eliminar los caracteres de apertura y cierre de bloque de codigo "/*" y "*/") +#
/*
if (varFloat1 < varFloat2 AND )
{
    write("error de condición incompleta")
}

if (NOT )
{
    write("error falta condición luego de NOT")
}

if varFloat1 > varFloat2
{
    write("error falta paréntesis en IF")
}
*/

#+ TEST EXTRA PARA BUCLES WHILE +#
varInt12 := 0
while (varInt12 < 10)
{
    write(varInt12)
    varInt12 := varInt12 + 1
}

#+ CASOS QUE FALLAN EN WHILE (eliminar los caracteres de apertura y cierre de bloque de codigo "/*" y "*/") +#
/*
while varInt12 < 10
{
    write(varInt12)
    varInt12 := varInt12 + 1
}
*/

#+ TEST PARA LA FUNCIÓN REORDER +#
reorder([varFloat5+3, 1+1, 9-varFloat5], 1, 2) #+ Caso bien escrito +#
reorder([varInt6*varInt13-2, varFloat5+3, 1+1, 9-varFloat5], 0, 2) #+ Caso bien escrito +#
reorder([varInt6*varInt13-2, varFloat5+3, 1+1, 9-varFloat5], 0, 3) #+ Caso donde no reordena porque no hay nada a la derecha (pero es válido sintácticamente) +#
reorder([varInt6*varInt13-2, varFloat5+3, 1+1, 9-varFloat5], 1, 0) #+ Caso donde no reordena porque no hay nada a la izquierda (pero es válido sintácticamente) +#
reorder([5+5, 2*3, 9-4], 1, 1) #+ Caso válido invirtiendo elementos +#
reorder([varFloat5, varInt5, varInt7], 0, 2) #+ Caso válido reordenando extremos +#

#+ TESTS FALLIDOS PARA REORDER (eliminar los caracteres de apertura y cierre de bloque de codigo "/*" y "*/") +#
/*
reorder([varFloat5+3, 1+1, 9-varFloat5], 2, 2) #+ Error: valor booleano no es 0 o 1 +#
reorder(varFloat5+3, 1+1, 9-varFloat5, 1, 2) #+ Error: falta corchetes +#
reorder([varFloat5+3, 1+1, 9-varFloat5], 1, 2.5) #+ Error: el pivote no es un entero +#
reorder([], 1, 0) #+ Error: lista vacía +#
reorder([varFloat5+3, 1+1, 9-varFloat5], 1) #+ Error: falta parámetro pivote +#
reorder([5+5, 2*3, 9-4], -1, 1) #+ Error: índice negativo +#
reorder([5+5, 2*3, 9-4], 1, 5) #+ Error: índice fuera de rango +#
*/