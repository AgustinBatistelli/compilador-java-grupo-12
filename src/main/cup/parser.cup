package lyc.compiler;

import java_cup.runtime.*;

class Parser;


// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_BRACE;
terminal CLOSE_BRACE;
terminal EQUALS;
terminal GREATER_THAN;
terminal LESS_THAN;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal READ;
terminal WRITE;
terminal STRING_LITERAL;
terminal INTEGER_CONSTANT;
terminal IDENTIFIER;
terminal ASSIGNATION;
terminal INIT;
terminal FLOAT_TYPE;
terminal INT;
terminal STRING;
terminal COLON;
terminal COMMA;
terminal COMMENT;
terminal OR;
terminal AND;
terminal NOT;
terminal FLOAT;

// Non Terminals
non terminal program;
non terminal sentence;
non terminal sentences;
non terminal assignment;
non terminal if_stmt;
non terminal while_loop;
non terminal write_stmt;
non terminal read_stmt;
non terminal expression;
non terminal comparison;
non terminal term;
non terminal factor;
non terminal init_block;
non terminal variable_declaration;
non terminal variable_declaration_list;
non terminal identifier_list;
non terminal type;

// Start Symbol Definition
start with program;

program ::= sentences
          | COMMENT program;

sentences ::= sentence sentences
           | ;

sentence ::= init_block;
sentence ::= assignment;
sentence ::= if_stmt;
sentence ::= write_stmt;
sentence ::= while_loop;
sentence ::= read_stmt;

init_block ::= INIT OPEN_BRACE variable_declaration_list CLOSE_BRACE
             {: System.out.println("Initialization block"); :};

assignment ::= IDENTIFIER:id ASSIGNATION expression {: System.out.println("Assignment to ID: "+ id); :};
assignment ::= IDENTIFIER:id ASSIG expression {: System.out.println("ASSIG to ID: "+ id); :};

// IF
if_stmt ::= IF OPEN_BRACKET comparison CLOSE_BRACKET OPEN_BRACE sentences CLOSE_BRACE
            {: System.out.println("If statement with block parsed");:};
if_stmt ::= IF OPEN_BRACKET comparison CLOSE_BRACKET OPEN_BRACE sentences CLOSE_BRACE ELSE OPEN_BRACE sentences CLOSE_BRACE
            {: System.out.println("If-Else statement parsed"); :};

write_stmt ::= WRITE OPEN_BRACKET STRING_LITERAL:str CLOSE_BRACKET
             {:
                System.out.println("Write statement with string literal: " + str);
                RESULT = "write(" + str + ")";
             :};

write_stmt ::= WRITE OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET
            {:
                System.out.println("Write statement with identifier: " + id);
                RESULT = "write(" + id + ")";
            :};

while_loop ::= WHILE OPEN_BRACKET comparison CLOSE_BRACKET OPEN_BRACE sentences CLOSE_BRACE
             {: System.out.println("While with condition"); :};

read_stmt ::= READ OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET
            {:
                System.out.println("Read statement with variable: "+ id);
                RESULT = "read(" + id + ")";
            :};


variable_declaration_list ::= variable_declaration variable_declaration_list | COMMENT variable_declaration_list | ;

variable_declaration ::= identifier_list:list COLON type:type
                       {:
                            System.out.println("Variable declaration: " + list + " of type " + type);
                       :};

identifier_list ::= IDENTIFIER:id {:
                        System.out.println("Id: " + id);
                        RESULT = id;
                   :};
identifier_list ::= identifier_list:list COMMA IDENTIFIER:id {:
                       System.out.println("List: " + list + ", ID: " + id);
                       RESULT = list + ", " + id;
                  :};

type ::= FLOAT_TYPE {: System.out.println("Float"); RESULT = "float"; :}
      | INT {: System.out.println("Int"); RESULT = "int"; :}
      | STRING {: System.out.println("String"); RESULT = "string"; :};

comparison ::= expression:exp1 GREATER_THAN expression:exp2 {:
    System.out.println("Comparison: " + exp1 + " > " + exp2);
    RESULT = exp1 + " > " + exp2;
:};

comparison ::= expression:exp1 LESS_THAN expression:exp2 {:
    System.out.println("Comparison: " + exp1 + " < " + exp2);
    RESULT = exp1 + " < " + exp2;
:};

comparison ::= expression:exp1 EQUALS expression:exp2 {:
    System.out.println("Comparison: " + exp1 + " = " + exp2);
    RESULT = exp1 + " == " + exp2;
:};

// Comparison with and
comparison ::= comparison:comp AND expression:exp1 GREATER_THAN expression:exp2 {:
    System.out.println("Comparison " + comp + " AND " + exp1 + " > " + exp2);
    RESULT = comp + " AND " + exp1 + " > " + exp2;
:};

comparison ::= comparison:comp AND expression:exp1 LESS_THAN expression:exp2 {:
    System.out.println("Comparison " + comp + " AND " + exp1 + " < " + exp2);
    RESULT = comp + " AND " + exp1 + " < " + exp2;
:};

comparison ::= comparison:comp AND expression:exp1 EQUALS expression:exp2 {:
    System.out.println("Comparison " + comp + " AND " + exp1 + " = " + exp2);
    RESULT = comp + " AND " + exp1 + " = " + exp2;
:};

// Comparison with or
comparison ::= comparison:comp OR expression:exp1 GREATER_THAN expression:exp2 {:
    System.out.println("Comparison " + comp + " OR " + exp1 + " > " + exp2);
    RESULT = comp + " OR " + exp1 + " > " + exp2;
:};

comparison ::= comparison:comp OR expression:exp1 LESS_THAN expression:exp2 {:
    System.out.println("Comparison " + comp + " OR " + exp1 + " < " + exp2);
    RESULT = comp + " OR " + exp1 + " < " + exp2;
:};

comparison ::= comparison:comp OR expression:exp1 EQUALS expression:exp2 {:
    System.out.println("Comparison " + comp + " OR " + exp1 + " = " + exp2);
    RESULT = comp + " OR " + exp1 + " = " + exp2;
:};

// Comparison with NOT
comparison ::= NOT expression:exp1 GREATER_THAN expression:exp2 {:
    System.out.println("Comparison NOT " + exp1 + " > " + exp2);
    RESULT = "NOT " + exp1 + " > " + exp2;
:};

comparison ::= NOT expression:exp1 LESS_THAN expression:exp2 {:
    System.out.println("Comparison NOT " + exp1 + " < " + exp2);
    RESULT = "NOT " + exp1 + " < " + exp2;
:};

comparison ::= NOT expression:exp1 EQUALS expression:exp2 {:
    System.out.println("Comparison NOT " + exp1 + " = " + exp2);
    RESULT = "NOT " + exp1 + " = " + exp2;
:};

comparison ::= expression:exp1 {:
    System.out.println("Comparison: " + exp1);
    RESULT = exp1;
:};

expression ::= term
            | expression PLUS term {: System.out.println("+"); :}
            | expression SUB term {: System.out.println("-"); :};

term ::= factor
      | term MULT factor {: System.out.println("*"); :}
      | term DIV factor {: System.out.println("/"); :};

factor ::= IDENTIFIER:id {: System.out.println("Id: " + id); RESULT = id; :};
factor ::= INTEGER_CONSTANT:constant {: System.out.println("Constant: " + constant); RESULT = constant; :};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};
factor ::= FLOAT:f {: System.out.println("Float constant: " + f); RESULT = f; :};
factor ::= STRING_LITERAL:str {: System.out.println("String literal: " + str); RESULT = str; :};