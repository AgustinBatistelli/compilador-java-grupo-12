package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.files.SymbolTableGenerator;
import java.util.*;

class Parser;


// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_PARENTHESES;
terminal CLOSE_PARENTHESES;
terminal OPEN_BRACE;
terminal CLOSE_BRACE;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal EQUALS;
terminal GREATER_THAN;
terminal LESS_THAN;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal READ;
terminal WRITE;
terminal STRING_LITERAL;
terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal IDENTIFIER;
terminal ASSIGNATION;
terminal ARITHMETIC_ASSIG;
terminal INIT;
terminal FLOAT_TYPE;
terminal INT;
terminal STRING;
terminal COLON;
terminal COMMA;
terminal COMMENT;
terminal OR;
terminal AND;
terminal NOT;
terminal REORDER;
terminal BOOL;

// Non Terminals
non terminal program;
non terminal sentence;
non terminal sentences;
non terminal assignment;
non terminal if_stmt;
non terminal while_loop;
non terminal write_stmt;
non terminal read_stmt;
non terminal expression;
non terminal comparison;
non terminal term;
non terminal factor;
non terminal init_block;
non terminal variable_declaration;
non terminal variable_declaration_list;
non terminal identifier_list;
non terminal type;
non terminal assign_operator;
non terminal reorder_stmt;
non terminal reorder_list;
non terminal reorder_list_elements;
non terminal bool_expression;


// Start Symbol Definition
start with program;

program ::= sentences
          {:
              SymbolTableGenerator generator = new SymbolTableGenerator();
              generator.generate();
          :};

sentences ::= sentence sentences
             | ;

sentence ::= assignment
           | if_stmt
           | while_loop
           | init_block
           | read_stmt
           | write_stmt
           | reorder_stmt
           | COMMENT
           ;


init_block ::= INIT OPEN_BRACE variable_declaration_list CLOSE_BRACE
             {: System.out.println("Initialization block"); :};

// ASSIGNMENT
assignment ::= IDENTIFIER:id assign_operator expression {:
    System.out.println("Assignment to ID: " + id);
    if (!SymbolTableGenerator.isVariableDefined(id.toString().trim())) {
        SymbolTableGenerator.addVariable(id.toString().trim(), "-");
    }
:};

assign_operator ::= ASSIGNATION
                  | ARITHMETIC_ASSIG
                  | ASSIG
                  ;


// IF
if_stmt ::= IF OPEN_PARENTHESES comparison CLOSE_PARENTHESES OPEN_BRACE sentences CLOSE_BRACE
            {: System.out.println("If statement with block parsed");:};
if_stmt ::= IF OPEN_PARENTHESES comparison CLOSE_PARENTHESES OPEN_BRACE sentences CLOSE_BRACE ELSE OPEN_BRACE sentences CLOSE_BRACE
            {: System.out.println("If-Else statement parsed"); :};

write_stmt ::= WRITE OPEN_PARENTHESES STRING_LITERAL:str CLOSE_PARENTHESES
             {:
                System.out.println("Write statement with string literal: " + str);
                RESULT = "write(" + str + ")";
             :};

write_stmt ::= WRITE OPEN_PARENTHESES IDENTIFIER:id CLOSE_PARENTHESES
            {:
                System.out.println("Write statement with variable: " + id);
                RESULT = "write(" + id + ")";
            :};

while_loop ::= WHILE OPEN_PARENTHESES comparison CLOSE_PARENTHESES OPEN_BRACE sentences CLOSE_BRACE
             {: System.out.println("While with condition"); :};

read_stmt ::= READ OPEN_PARENTHESES IDENTIFIER:id CLOSE_PARENTHESES
            {:
                System.out.println("Read statement with variable: "+ id);
                RESULT = "read(" + id + ")";
            :};

// Reorder
reorder_stmt ::= REORDER OPEN_PARENTHESES OPEN_BRACKET reorder_list:list CLOSE_BRACKET COMMA bool_expression:bool COMMA INTEGER_CONSTANT:int_const CLOSE_PARENTHESES
                {:
                  System.out.println("Reorder statement detectada.");
                  System.out.println("Lista de elementos: " + list);
                  System.out.println("Valor de BOOL: " + bool);
                  System.out.println("Valor de INTEGER_CONSTANT: " + int_const);
                  RESULT = "reorder(" + list + "," + bool + "," + int_const + ")";
                :};


reorder_list ::= reorder_list_elements:list
               {:
                    System.out.println("Lista de elementos procesados: " + list);
                    RESULT = list;
                    System.out.println("Resultado final de la lista: " + RESULT);

               :};


reorder_list_elements ::= expression:exp
                        {:
                            System.out.println("Elemento a√±adido: " + exp);
                            RESULT = exp;
                        :}
                        | expression:exp COMMA reorder_list_elements:list
                        {:
                            System.out.println("Sumando: " + exp + " A lista: " + list);
                            RESULT = exp + ", " + list;
                        :};

variable_declaration_list ::= variable_declaration variable_declaration_list | COMMENT variable_declaration_list | ;

variable_declaration ::= identifier_list:list COLON type:type {:
    System.out.println("[Var Declaration] " + list + " : " + type);
    for (String id : (ArrayList<String>) list) {
        id = id.trim();
        if (!SymbolTableGenerator.isVariableDefined(id)) {
            SymbolTableGenerator.addVariable(id, type.toString());
        }
    }
:};


identifier_list ::= IDENTIFIER:id {:
    System.out.println("Id: " + id);
    List<String> ids = new ArrayList<>();
    ids.add(id.toString().trim());
    RESULT = ids;
:};

identifier_list ::= identifier_list:list COMMA IDENTIFIER:id {:
    System.out.println("List: " + list + ", ID: " + id);
    ((List<String>) list).add(id.toString().trim());
    RESULT = list;
:};

type ::= FLOAT_TYPE {: System.out.println("Float"); RESULT = "float"; :}
      | INT {: System.out.println("Int"); RESULT = "int"; :}
      | STRING {: System.out.println("String"); RESULT = "string"; :};

comparison ::= expression:exp1 GREATER_THAN expression:exp2 {:
    System.out.println("Comparison: " + exp1 + " > " + exp2);
    RESULT = exp1 + " > " + exp2;
:};

comparison ::= expression:exp1 LESS_THAN expression:exp2 {:
    System.out.println("Comparison: " + exp1 + " < " + exp2);
    RESULT = exp1 + " < " + exp2;
:};

comparison ::= expression:exp1 EQUALS expression:exp2 {:
    System.out.println("Comparison: " + exp1 + " = " + exp2);
    RESULT = exp1 + " == " + exp2;
:};

// Comparison with and
comparison ::= comparison:comp AND expression:exp1 GREATER_THAN expression:exp2 {:
    System.out.println("Comparison " + comp + " AND " + exp1 + " > " + exp2);
    RESULT = comp + " AND " + exp1 + " > " + exp2;
:};

comparison ::= comparison:comp AND expression:exp1 LESS_THAN expression:exp2 {:
    System.out.println("Comparison " + comp + " AND " + exp1 + " < " + exp2);
    RESULT = comp + " AND " + exp1 + " < " + exp2;
:};

comparison ::= comparison:comp AND expression:exp1 EQUALS expression:exp2 {:
    System.out.println("Comparison " + comp + " AND " + exp1 + " = " + exp2);
    RESULT = comp + " AND " + exp1 + " = " + exp2;
:};

// Comparison with or
comparison ::= comparison:comp OR expression:exp1 GREATER_THAN expression:exp2 {:
    System.out.println("Comparison " + comp + " OR " + exp1 + " > " + exp2);
    RESULT = comp + " OR " + exp1 + " > " + exp2;
:};

comparison ::= comparison:comp OR expression:exp1 LESS_THAN expression:exp2 {:
    System.out.println("Comparison " + comp + " OR " + exp1 + " < " + exp2);
    RESULT = comp + " OR " + exp1 + " < " + exp2;
:};

comparison ::= comparison:comp OR expression:exp1 EQUALS expression:exp2 {:
    System.out.println("Comparison " + comp + " OR " + exp1 + " = " + exp2);
    RESULT = comp + " OR " + exp1 + " = " + exp2;
:};

// Comparison with NOT
comparison ::= NOT expression:exp1 GREATER_THAN expression:exp2 {:
    System.out.println("Comparison NOT " + exp1 + " > " + exp2);
    RESULT = "NOT " + exp1 + " > " + exp2;
:};

comparison ::= NOT expression:exp1 LESS_THAN expression:exp2 {:
    System.out.println("Comparison NOT " + exp1 + " < " + exp2);
    RESULT = "NOT " + exp1 + " < " + exp2;
:};

comparison ::= NOT expression:exp1 EQUALS expression:exp2 {:
    System.out.println("Comparison NOT " + exp1 + " = " + exp2);
    RESULT = "NOT " + exp1 + " = " + exp2;
:};

comparison ::= expression:exp1 {:
    System.out.println("Comparison: " + exp1);
    RESULT = exp1;
:};

expression ::= term:exp {: RESULT = exp; :};
expression ::=  expression:exp1 PLUS term:exp2 {:
                System.out.println(exp1 + " + " + exp2);
                RESULT = exp1 + " + " + exp2;
            :};
expression ::= expression:exp1 SUB term:exp2 {:
                System.out.println(exp1 + " - " + exp2);
                RESULT = exp1 + " - " + exp2;
               :};

term ::= factor:exp {: RESULT = exp; :};
term ::= term:exp1 MULT factor:exp2 {:
            System.out.println(exp1 + " * " + exp2);
            RESULT = exp1 + " * " + exp2;
         :};
term ::= term:exp1 DIV factor:exp2 {:
           System.out.println(exp1 + " / " + exp2);
           RESULT = exp1 + " / " + exp2;
         :};

factor ::= IDENTIFIER:id {: System.out.println("Id: " + id); RESULT = id; :};
factor ::= INTEGER_CONSTANT:constant {:
            System.out.println("Constant: " + constant);
            String value = constant.toString();
            SymbolTableGenerator.addConstant(value, "int", value);
            RESULT = value;
            :};

factor ::= FLOAT_CONSTANT:constant {:
            System.out.println("Constant: " + constant);
            String value = constant.toString();
            SymbolTableGenerator.addConstant(value, "float", value);
            RESULT = constant;
            :};

factor ::= STRING_LITERAL:literal {:
            System.out.println("String literal: " + literal);
            String value = literal.toString();
            SymbolTableGenerator.addConstant(value, "string", value);
            RESULT = literal;
            :};

factor ::= OPEN_PARENTHESES expression:exp CLOSE_PARENTHESES {: System.out.println("Expression: (" + exp + ")"); RESULT = exp; :};

bool_expression ::= INTEGER_CONSTANT:integer_constant
        {:
          if (!integer_constant.equals("0") && !integer_constant.equals("1")) {
            throw new Exception("Invalid boolean constant: " + integer_constant);
          }
          RESULT = integer_constant;
        :};